WHITESPACE = _{ PATTERN_WHITE_SPACE }
COMMENT = _{
    "//" ~ !"/" ~ (!"\n" ~ ANY)* ~ "\n"
    | "/*" ~ (!"*/" ~ ANY)* ~ "*/"
}

File               = { SOI ~ FunctionDefinition* ~ EOI }
FunctionDefinition = { "funk" ~ Identifier ~ "(" ~ ")" ~ Block }
Block              = { "{" ~ Statement* ~ Expression? ~ "}" }

// Statements

Statement                      =  { AssignementStatement | VariableDeclarationStatement | ExpressionStatement }
  VariableDeclarationStatement =  { "let" ~ Identifier ~ ":" ~ Type ~ "=" ~ !"=" ~ Expression ~ ";" }
  AssignementStatement         =  { Expression ~ AssignementOperator ~ Expression ~ ";" }
  AssignementOperator          = _{ Assign | AddAssign | SubstractAssign | MultiplyAssign | DivideAssign | ShiftLeftAssign | ShiftRightAssign | BitOrAssign | BitAndAssign }
    Assign                     =  { "=" }
    AddAssign                 =  { "+=" }
    SubstractAssign            =  { "-=" }
    MultiplyAssign             =  { "*=" }
    DivideAssign               =  { "/=" }
    ShiftLeftAssign            =  { "<<=" }
    ShiftRightAssign           =  { ">>=" }
    BitOrAssign                =  { "|=" }
    BitAndAssign               =  { "&=" }

ExpressionStatement = { Expression ~ ";" }

Type = { Identifier }

// Math like expressions

Expression                 =  { ExpressionPrefixOperator* ~ ExpressionAtom ~ (ExpressionInfixOperator ~ ExpressionPrefixOperator* ~ ExpressionAtom)* }
  ExpressionPrefixOperator = _{ Noop | Negate | Complement | Not }
    Noop                   =  { "+" }
    Negate                 =  { "-" }
    Complement             =  { "~" }
    Not                    =  { "!" }
  ExpressionInfixOperator  = _{ Or | And | Add | Substract | Multiply | Divide | ShiftLeft | ShiftRight | BitAnd | BitOr | BitXor | LowerEqual | LowerThan | GreaterEqual | GreaterThan | Equal | NotEqual }
    Or                     =  { "||" }
    And                    =  { "&&" }
    Add                    =  { "+" }
    Substract              =  { "-" }
    Multiply               =  { "*" }
    Divide                 =  { "/" }
    ShiftLeft              =  { "<<" }
    ShiftRight             =  { ">>" }
    BitAnd                 =  { "&" }
    BitOr                  =  { "|" }
    BitXor                 =  { "^" }
    LowerEqual             =  { "<=" }
    LowerThan              =  { "<" }
    GreaterEqual           =  { ">=" }
    GreaterThan            =  { ">" }
    Equal                  =  { "==" }
    NotEqual               =  { "!=" }
  ExpressionAtom           =  { "(" ~ Expression ~ ")" | Block | Literal | Identifier }

// Literals

Literal = { LiteralString | LiteralFloat | LiteralInteger }
  LiteralString = { "\"" ~ (!"\"" ~ ANY)* ~ "\"" }
  LiteralInteger = @{ LiteralBinary | LiteralHexadecimal | LiteralDecimal }
  LiteralFloat = @{
      LiteralDecimal ~ ("." ~ LiteralDecimal)? ~ ("e" | "E") ~ ("+" | "-")? ~ LiteralDecimal
      | LiteralDecimal ~ "." ~ LiteralDecimal
      | LiteralDecimal ~ "." ~ !"." ~ !"_" ~ !XID_START
  }
  LiteralDecimal     = @{ ASCII_DIGIT ~ (ASCII_DIGIT | "_")* }
  LiteralBinary      = @{ "0b" ~ ASCII_BIN_DIGIT ~ (ASCII_BIN_DIGIT | "_")* }
  LiteralHexadecimal = @{ "0x" ~ ASCII_HEX_DIGIT ~ (ASCII_HEX_DIGIT | "_")* }

Identifier            = @{ (XID_START | "_") ~ XID_CONTINUE* }
